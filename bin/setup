#!/usr/local/bin/pike

/* Copyright (C) 2000-2004  Thomas Bopp, Thorsten Hampel, Ludger Merkens
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 * $Id: setup.in,v 1.3 2008/07/16 19:19:17 astra Exp $
 */

constant cvs_version="$Id: setup.in,v 1.3 2008/07/16 19:19:17 astra Exp $";

string brand_name = "steam";
string config_dir = "/etc/steam";
string log_dir = "/var/log/steam";
string steam_dir = "/usr/local/lib/steam";
string install_dir = "/";

int replace_db_string_in_file ( string filename, string db_access_string )
{
    mixed err = catch {
        string config_text = Stdio.read_file( filename );
        if ( !stringp(config_text) ) return 0;
        array config_lines = config_text / "\n";
        for ( int i=0; i<sizeof(config_lines); i++ )
        {
            string line = config_lines[i];
            if ( stringp(line) && sizeof(line)>=9 && line[0..8]=="database=" )
            {
                config_lines[i] = "database=" + db_access_string;
                config_text = (config_lines * "\n") + "\n";
                Stdio.write_file( filename, config_text );
                return 1;
            }
        }
    };
    return 0;
}

int main(int argc, array argv)
{
    Sql.Sql handle;
    mapping conf = ([ 
	"rootpw": "", 
	"password": "steam", 
	"user":"steam", 
	"db":brand_name,]);

    for ( int i = 1; i < argc; i++ ) {
      string val;
      
      if ( sscanf(argv[i], "--newroot=%s", val) == 1 ) {
	Process.system("mysqladmin -u root password " + val);
      }
      else if ( sscanf(argv[i], "--password=%s", val) == 1 )
	conf["password"] = val;
      else if ( sscanf(argv[i], "--user=%s", val) == 1 )
	conf["user"] = val;
      else if ( sscanf(argv[i], "--rootpw=%s", val) == 1 )
	conf["rootpw"] = val;
      else if ( sscanf(argv[i], "--db=%s", val) == 1 )
	conf["db"] = val;
      else if ( argv[i] == "--drop" )
        conf->drop = "true";
      else if ( argv[i] == "--ignore-existing-db" )
        conf->ignore_existing_db = "true";
      else if ( argv[i] == "--quiet" )
        conf->quiet = "true";
      else if ( argv[i] == "--help" ) {
	write("sTeam Setup utility creates an empty database. Options: \n"+
	      " --db= Choose the name for the new database (default: "+brand_name+")\n"+
	      " --rootpw= You MySQL root password\n"+
	      " --user= The mysql user for the database (default: steam)\n"+
	      " --password= The password for the user (default: steam)\n"+
              " --drop  Drops an old database with name specified by --db\n"+
              " --ignore-existing-db  Doesn't return an error if the database already exists\n"+
              " --quiet  Don't print any output (not even error messages)\n"+
	      " The utility returns the database access string for steam.cnf\n");
	return 0;
      }
      
    }
    if ( catch(handle = Sql.Sql("mysql://root:"+conf->rootpw+"@localhost/mysql")) )
    {
	if ( ! conf->quiet ) werror("Failed to connect to database:\n"+
		"1) Make sure mysql is running.\n"+
	        "2) Is a root pw for mysql set? Use --rootpw=pw to login.\n");
	return 1;
    }
    array tables = handle->list_dbs();
    if (!arrayp(tables)) {
	werror("Failed to connect to database using root:" + conf->rootpw + 
	       "@localhost/mysql ...\n");
	return 1;
    }
    if ( search(tables, conf->db) >= 0 ) {
	if ( ! conf->quiet )
            write("The database "+ conf->db + " already exists.\n");
	if ( conf->drop ) {
	    handle->big_query("drop database " + conf->db);
	    if ( ! conf->quiet )
                write("Dropped database - creating new...\n");
        }
	else if ( ! conf->ignore_existing_db )
	    return 1;
    }
    else {
      handle->big_query("create database " + conf->db);
      handle->big_query("use mysql");
      handle->big_query("grant all privileges on " + conf->db + ".* to "+
		      conf->user + " @localhost identified by '" + conf->password+
		      "' with grant option;");

      if ( ! conf->quiet )
          write("Database "+ conf->db + " has been created successfully.\n"+
                "User " + conf->user + " has all privileges to new DB.\n");
      string db_access_string = "mysql://" + conf->user + ":" + conf->password + "@localhost/" + conf->db;

      // MySQL 4.1 and newer use a new password authentication hash. If login
      // doesn't work, then try to use the old password format:
      if ( objectp(handle) ) handle = 0;  // disconnect
      if ( catch( handle = Sql.Sql( db_access_string ) ) ) {
          if ( catch( handle = Sql.Sql("mysql://root:"+conf->rootpw+"@localhost/mysql") ) == 0 ) {
              if ( ! conf->quiet )
                  write( "Setting old password format for database user '"
                         + conf->user + "'.\n" );
              handle->big_query("set password for " + conf->user +
                  "@localhost = OLD_PASSWORD('" + conf->password + "');" );
          }
      }
      replace_db_string_in_file( config_dir + "/steam.cfg", db_access_string );
      if ( ! conf->quiet )
          write("Your database  acces string is: " + db_access_string + "\n");
    }

    return 0;
}
